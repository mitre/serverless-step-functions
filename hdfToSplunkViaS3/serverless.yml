service: hdfToSplunkViaS3

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs12.x
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "states:StartExecution"
          Resource:
            - "*"

          # Resource: # Best practice: Use the specific resource ref of your stepFunction
          #   Fn::Join:
          #     - ''
          #     - - 'arn:aws:s3:::'
          #       - Ref: ServerlessDeploymentBucket
        # - Effect: 'Allow' # EXAMPLE
        #   Action:
        #     - 's3:PutObject'
        #   Resource:
        #     Fn::Join:
        #       - ''
        #       - - 'arn:aws:s3:::'
        #         - Ref: ServerlessDeploymentBucket
        #         - '/*'
    #   path: ${env:IAM_ROLE_PATH} # CMS requirement
    #   permissionsBoundary: ${env:IAM_ROLE_BOUNDARY}
  environment: # Was in functions before
    STATE_MACHINE_ARN: ${self:resources.Outputs.hdfToSplunkViaS3Workflow.Value}

functions:
  hello:
    handler: handler.hello
    events:
      - s3:
          bucket: sls-attempt-one
          event: s3:ObjectCreated:*

stepFunctions:
  stateMachines:
    hdfToSplunkViaS3Workflow:
      name: hdfToSplunkViaS3Workflow
      # role: # Uncomment when you create a custom StateMachine role in resources.Resources
      #   Fn::GetAtt: ["StateMachineRole", "Arn"]
      definition:
        Comment: "Workflow initiated"
        StartAt: ValidateImage
        States:
          ValidateImage:
            Type: Pass
            Result: "Completed" # S3 contents
            End: true
          # hdfToSplunkFunctionExecution:
          #   Type: Task
          #   Resource:
          #     Fn::GetAtt: [hello, Arn]
          #   End: true

resources:
  Outputs:
    hdfToSplunkViaS3Workflow:
      Description: The ARN of this state machine
      Value:
        Ref: HdfToSplunkViaS3Workflow
  # Resources: # CMS requirement if default role needs to be modified | Uncomment role ref under stateMachines
  #   StateMachineRole:
  #     Type: AWS::IAM::Role
  #     Properties:
  #       RoleName: hdfToSplunkViaS3StateMachineRole
  #       Path: ${env:IAM_ROLE_PATH} # CMS requirement
  #       PermissionsBoundary: ${env:IAM_ROLE_BOUNDARY}
  #       AssumeRolePolicyDocument:
  #         Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - states.amazonaws.com
  #           Action:
  #             - sts:AssumeRole

    # existingS3LambdaExecutionRole:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     RoleName: existingS3Role
    #     Path: ${env:IAM_ROLE_PATH}
    #     PermissionsBoundary: ${env:IAM_ROLE_BOUNDARY}
    #     AssumeRolePolicyDocument:
    #       Statement:
    #       - Effect: Allow
    #         Principal:
    #           Service:
    #             - states.amazonaws.com
    #         Action:
    #           - sts:AssumeRole

    # call function to load/glue file from event

plugins:
  - serverless-step-functions


## SNIPPETS

# Define service wide environment variables here
#  environment:
#    variable1: value1

# Define function environment variables here
#    environment:
#      variable2: value2

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"


# Existing Bucket approach (enhancement)

# functions:
#   hello:
#     handler: handler.hello
#     events:
#       - s3:
#           bucket: ${env:BUCKET}
#           event: s3:ObjectCreated:*
#           existing: true
#     role:
#       Fn::GetAtt: ["existingS3LambdaExecutionRole", "Arn"]