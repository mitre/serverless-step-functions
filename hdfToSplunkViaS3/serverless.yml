service: hdfToSplunkViaS3

# frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs12.x
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "states:*"
            - "s3:*"
          Resource:
            - "*"
    #   path: ${env:IAM_ROLE_PATH} # sponsor requirement
    #   permissionsBoundary: ${env:IAM_ROLE_BOUNDARY}

functions:
  saf:
    handler: saf-lambda.saf
    environment:
      COMMAND_STRING_INPUT: ${env:COMMAND_STRING_INPUT}
  stateMachineTrigger:
    handler: handler.stateMachineTrigger
    events:
      - s3:
          bucket: ${env:BUCKET}
          event: s3:ObjectCreated:*
    environment:
      STATE_MACHINE_ARN: ${self:resources.Outputs.HdfToSplunkViaS3Workflow.Value}

stepFunctions:
  stateMachines:
    myStepFunction:
      name: HdfToSplunkViaS3Workflow
      # role: # Uncomment when you create a custom StateMachine role in resources.Resources
      #   Fn::GetAtt: ["StateMachineRole", "Arn"]
      definition:
        Comment: "Workflow initiated"
        StartAt: RunSaf
        States:
          RunSaf:
            Type: Task
            Resource: 
              Fn::GetAtt: [saf, Arn]
            End: true

resources:
  Outputs:
    HdfToSplunkViaS3Workflow:
      Description: The ARN of this state machine
      Value:
        Ref: HdfToSplunkViaS3Workflow
  # Resources: # sponsor requirement if default role needs to be modified | Uncomment role ref under stateMachines
  #   StateMachineRole:
  #     Type: AWS::IAM::Role
  #     Properties:
  #       RoleName: hdfToSplunkViaS3StateMachineRole
  #       Path: ${env:IAM_ROLE_PATH} # CMS requirement
  #       PermissionsBoundary: ${env:IAM_ROLE_BOUNDARY}
  #       AssumeRolePolicyDocument:
  #         Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - states.amazonaws.com
  #           Action:
  #             - sts:AssumeRole

    # existingS3LambdaExecutionRole:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     RoleName: existingS3Role
    #     Path: ${env:IAM_ROLE_PATH}
    #     PermissionsBoundary: ${env:IAM_ROLE_BOUNDARY}
    #     AssumeRolePolicyDocument:
    #       Statement:
    #       - Effect: Allow
    #         Principal:
    #           Service:
    #             - states.amazonaws.com
    #         Action:
    #           - sts:AssumeRole

    # call function to load/glue file from event

plugins:
  - serverless-step-functions
  # - serverless-iam-roles-per-function


## SNIPPETS

# you can add packaging information here
package:
  patterns:
    - '!.git/**'
    - '!.aws-sam/**'
    - '!node_modules/aws-sdk/**'
    - '!.idea/**'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"


# Existing Bucket approach (enhancement)

# functions:
#   hello:
#     handler: handler.hello
#     events:
#       - s3:
#           bucket: ${env:BUCKET}
#           event: s3:ObjectCreated:*
#           existing: true
#     role:
#       Fn::GetAtt: ["existingS3LambdaExecutionRole", "Arn"]
