service: hdfToSplunkViaS3

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs12.x
  iam:
    role:
      path: ${env:IAM_ROLE_PATH}
      permissionsBoundary: ${env:IAM_ROLE_BOUNDARY}

functions:
  hello:
    handler: handler.hello
    events:
      - s3:
          bucket: sls-attempt-one # ${env:BUCKET}
          event: s3:ObjectCreated:*
          # existing: true
    # role:
    #   Fn::GetAtt: ["existingS3LambdaExecutionRole", "Arn"]
    environment:
      MY_STATE_MACHINE_ARN: ${self:resources.Outputs.MyStateMachine.Value} 

stepFunctions:
  stateMachines:
    hdfToSplunkViaS3Workflow:
      role:
        Fn::GetAtt: ["StateMachineRole", "Arn"]
      definition:
        Comment: "Workflow initiated"
        StartAt: hdfToSplunkFunctionExecution
        States:
        
          # hdfToSplunkFunctionExecution:
          #   Type: Task
          #   Resource:
          #     Fn::GetAtt: [hello, Arn]
          #   End: true

resources:
  Resources:
    StateMachineRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: hdfToSplunkViaS3Role
        Path: ${env:IAM_ROLE_PATH}
        PermissionsBoundary: ${env:IAM_ROLE_BOUNDARY}
        AssumeRolePolicyDocument:
          Statement:
          - Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
            Action:
              - sts:AssumeRole
    # existingS3LambdaExecutionRole:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     RoleName: existingS3Role
    #     Path: ${env:IAM_ROLE_PATH}
    #     PermissionsBoundary: ${env:IAM_ROLE_BOUNDARY}
    #     AssumeRolePolicyDocument:
    #       Statement:
    #       - Effect: Allow
    #         Principal:
    #           Service:
    #             - states.amazonaws.com
    #         Action:
    #           - sts:AssumeRole

    # call function to load/glue file from event

plugins:
  - serverless-step-functions


## SNIPPETS

# Define service wide environment variables here
#  environment:
#    variable1: value1

# Define function environment variables here
#    environment:
#      variable2: value2

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"